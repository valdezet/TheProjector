@{
    @model TheProjector.Data.ViewModels.ProjectViewViewModel;
ViewData["Title"] = @Model.BasicInfo.Name;
}

<div>
    <div class="d-flex justify-content-between">
        <div class="mb-3">
            <h4>@Model.BasicInfo.Name</h4>
            <h5 class="text-muted">@Model.BasicInfo.Code</h5>
            @if (Model.BasicInfo.IsArchived)
            {
                <h6 class="text-muted">
                    Archived:&nbsp;
                    <span data-archived-utc='@Model.BasicInfo.DateArchivedUtc!.Value.ToString("o")'>
                    </span>
                </h6>
            }
        </div>
        <div>
            @if (!Model.BasicInfo.IsArchived)
            {
                <form asp-action="Archive" method="POST" id='archive-form'>
                    <input type="submit" value="Mark as Archived" class="btn btn-secondary">
                </form>
            }
            else
            {
                <form asp-action="Unarchive" method="POST" id='unarchive-form'>
                    <input type="submit" value="Unarchive" class="btn btn-secondary">
                </form>
            }
        </div>
    </div>

    <p title="@Model.BasicInfo.Budget" class="mb-3">Budget: @Model.BasicInfo.BudgetShortHand</p>

    <h5>Remarks</h5>
    <p>@(Model.BasicInfo.Remarks ?? "None")</p>
    <hr />
    @if (Model.BasicInfo.IsArchived)
    {
        <p class="alert alert-info">Can't assign new people on an archived project.</p>
    }
    else
    {
        <div class="col-mb-2">
            <h4>Assign People</h4>
            <form id="assign-person" asp-action="AssignPerson" class="row">
                <div class="col-sm-10 col-md-11">
                    <select name="PersonId" class="form-select">
                        <option disabled value="0" selected>None Selected</option>
                        @if (Model.AssignablePeople != null)
                        {
                            @foreach (var person in Model.AssignablePeople)
                            {
                                <option value="@person.Id">@person.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-sm-2 col-md-1">
                    <input type="submit" value="Assign" class="btn btn-primary">
                </div>
            </form>
            <div id="person-assignment-errors">

            </div>
        </div>
    }
    <div class="col-mb-3">
        <h4>Assigned People</h4>
        <table class="table table-sm">
            <colgroup>
                @if (Model.BasicInfo.IsArchived)
                {
                    <col class="col-12">
                }
                else
                {
                    <col class="col-11">
                    <col class="col-1">
                }
            </colgroup>
            <thead>
                <tr>
                    <th>Name</th>
                    @if (!Model.BasicInfo.IsArchived)
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>
            <tbody id="assigned-people">
                @foreach (var person in Model.AssignedPeople)
                {
                    <tr>
                        <td data-purpose="person-name-column">@person.Name</td>
                        @if (!Model.BasicInfo.IsArchived)
                        {
                            <td>
                                <form asp-action="UnassignPerson" data-purpose="unassign-person">
                                    <input type="hidden" name="PersonId" value="@person.Id" />
                                    <input type="submit" class="btn btn-danger" value="Unassign" />
                                </form>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="dialog-modal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dialog-modal-title">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="dialog-modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var unassignPersonAction = '@Url.Action("UnassignPerson")';
        var antiForgeryTokenElement = '@Html.AntiForgeryToken()';

        var $assignedPeople = $("tbody#assigned-people");
        var $assignPersonForm = $("form#assign-person");
        var $assignPersonDropdown = $assignPersonForm.find('select');

        function openDialogModal(title, body) {
            let $dialogModal = $("div#dialog-modal");
            let $modalTitle = $dialogModal.find("#dialog-modal-title");
            $modalTitle.html(title);
            let $modalBody = $dialogModal.find("#dialog-modal-body");
            $modalBody.html(body);
            $dialogModal.modal("show");
            // remove focus
            document.activeElement.blur();
        }

        function clearAssignmentErrors() {
            $("#person-assignment-errors").html("");
        }

        function addAssignedPerson(id, name) {
            let $newRow = $("<tr></tr");
            let $newNameTd = $("<td data-purpose='person-name-column'></td>").html(name);
            $newRow.append($newNameTd);
            let $removeTd = $("<td></td>");
            let $removeForm = $("<form data-purpose='unassign-person'></form>");
            $removeForm.attr("action", unassignPersonAction);
            $removeForm.data("form-purpose", "unassign-person");
            let $removeIdHidden = $(`<input type='hidden' name='PersonId' value='${id}'/>`);
            $removeForm.append($removeIdHidden);
            let $removeButton = $("<input type='submit' class='btn btn-danger' value='Unassign'/>");
            $removeForm.append($removeButton);
            $removeForm.append(antiForgeryTokenElement);
            $removeTd.append($removeForm);
            $newRow.append($removeTd);
            $assignedPeople.append($newRow);
        }

        function addAssignablePersonToDropdown(id, name) {
            let $assignableSelect = $("form#assign-person select");
            let $newOption = $(`<option value=${id}>${name}</option>`);
            $assignableSelect.append($newOption);
        }

        // assign person handler
        $assignPersonForm.submit(function (e) {
            e.preventDefault();
            clearAssignmentErrors();
            let $form = $(e.target);
            let $selectedOption = $form.find("option:selected");
            if ($selectedOption.val() === "0") {
                openDialogModal("Assign Person", "Please select a person to assign.");
                return;
            }
            $.post(
                $form.attr('action'),
                $form.serialize(),
                function (data) {
                    let name = $selectedOption.html();
                    let id = $selectedOption.val();
                    $selectedOption.remove();
                    addAssignedPerson(id, name);
                    openDialogModal("Assign Person", `${name} is successfully assigned to the project!`);
                    // return to "none selected" when list is empty (shows blank instead of "none selected")
                    if ($assignPersonDropdown.children().length == 1) {
                        $assignPersonDropdown.prop("selectedIndex", 0);
                    }
                }
            ).fail(function (jqXHR, textStatus, errorThrown) {
                if (jqXHR.status === 400) {
                    let errors = jqXHR.responseJSON;

                    $("#person-assignment-errors").append(
                        $("<p class='text-danger'></p>").html(errors[""])
                    );
                }
            });
        });

        // remove person handler
        $("tbody#assigned-people").on('submit', "form[data-purpose='unassign-person']", function (e) {
            e.preventDefault();
            let $form = $(e.target);
            let formAction = $form.attr("action");
            $.post(
                formAction,
                $form.serialize(),
                function (data) {
                    let $rowToRemove = $($form.closest("tr"));
                    let nameToRemove = $rowToRemove.find("td[data-purpose='person-name-column']").html();
                    let idToRemove = $form.find("input[name='PersonId']").val();
                    addAssignablePersonToDropdown(idToRemove, nameToRemove);
                    $form.closest("tr").remove();
                    openDialogModal("Unassign Person", `${nameToRemove} has been successfully unassigned from the project!`);
                }
            ).fail(function (jqXHR, textStatus, errorThrown) {
                openDialogModal("Unassign Person", jqXHR.responseJSON[""]);
            })
        });

        // archive project

        let $archiveForm = $("form#archive-form");
        $archiveForm.submit(function (e) {
            e.preventDefault();
            $.post(
                $archiveForm.attr("action"),
                $archiveForm.serialize(),
                function () {
                    openDialogModal("Archive Project", `<p>@Model.BasicInfo.Name is successfully archived!</p> <p>Reloading in 3 seconds.</p>`);
                    setTimeout(function () {
                        location.reload();
                    }, 3 * 1000);
                }
            ).fail(function (jqXHR, textStatus, errorThrown) {
                openDialogModal("Archive Project", jqXHR.responseJSON[""]);
            });
        });

        // convert datetime archive
        var $archiveDateElement = $("span[data-archived-utc]");
        if ($archiveDateElement) {
            let timestampedUtc = $archiveDateElement.data("archived-utc") + "Z";
            $archiveDateElement.html(new Date(timestampedUtc).toLocaleString());
        }

        var $unarchiveForm = $("form#unarchive-form");
        if ($unarchiveForm) {
            $unarchiveForm.submit(function (e) {
                e.preventDefault();
                $.post(
                    $unarchiveForm.attr("action"),
                    $unarchiveForm.serialize(),
                    function () {
                        openDialogModal("Unarchive Project", `<p>@Model.BasicInfo.Name is now active again!</p> <p>Reloading in 3 seconds.</p>`);
                        setTimeout(function () {
                            location.reload();
                        }, 3 * 1000);
                    }
                ).fail(function (jqXHR, textStatus, errorThrown) {
                    openDialogModal("Unarchive Project", jqXHR.responseJSON[""]);
                });
            });
        }
    </script>
}