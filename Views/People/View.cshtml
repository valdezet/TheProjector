@{
    @model TheProjector.Data.ViewModels.PersonViewViewModel;
ViewData["Title"] = @Model.BasicInfo.FullName;


}

@functions {
    string getURLWithNewQueryString(string key, object? newValue)
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(Context.Request.QueryString.Value);
        query[key] = newValue.ToString();
        return Context.Request.Path + QueryString.Create(query).ToUriComponent();
    }

    string ArchiveActiveMatchClassName(string classes, bool matchIfArchived)
    {
        return classes + (matchIfArchived == Model.AssignedProjects.Archived ? " active" : "");
    }
}


<div>
    <div class="mb-3 d-flex justify-content-between">
        <h4>@Model.BasicInfo.FullName</h4>
        <div>
            <a class="btn btn-primary" asp-action="Edit">Edit</a>
        </div>
    </div>



    <h4>Projects assigned to @Model.BasicInfo.FullName:</h4>
    <div class="btn-group">
        <a class='@ArchiveActiveMatchClassName("btn btn-secondary", false)' asp-route-Archived="false"
            title="Look for active projects">
            Active
        </a>
        <a class='@ArchiveActiveMatchClassName("btn btn-secondary", true)' asp-route-Archived="true"
            title="Look for archived projects">
            Archived
        </a>
    </div>
    <div class="mb-3">
        <form action="" method="GET">
            <h4>Search</h4>
            <div class="d-flex gap-1 mb-1">
                <div class="flex-grow-1">
                    <input type="text" name="Name" class="form-control " />
                    <div class="form-check form-check-inline"
                        title="Search for Archived Projects instead of Active Projects.">
                        <input class="form-check-input" type="checkbox" id="archive-search-filter" name="Archived"
                            value="true" checked="@Model.AssignedProjects.Archived" />
                        <label class="form-check-label" for="archive-search-filter">Archived</label>
                    </div>

                </div>
                <div>
                    <button type="submit"
                        class="btn btn-primary material-symbols-outlined d-block flex-shrink-1">search</button>
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.AssignedProjects.NameSearch))
            {
                <p>Searching for: @Model.AssignedProjects.NameSearch <a asp-action="View">Clear</a></p>
            }

        </form>
    </div>
    @if (Model.AssignedProjects.Collection.Count > 0)
    {
        <div class="d-flex justify-content-between align-items-end">
            <p>Showing @Model.AssignedProjects.Collection.Count items of @Model.AssignedProjects.TotalCount</p>
            <div class="d-flex gap-1 align-items-baseline">
                <p>Items per page</p>
                <div class="dropdown">
                    <a class="btn btn-light btn-sm dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        @Model.AssignedProjects.ItemsPerPage

                    </a>
                    <ul class="dropdown-menu">
                        @foreach (int item in Model.AssignedProjects.ItemsPerPageSelection)
                        {
                            <li><a class="dropdown-item" href='@getURLWithNewQueryString("ItemsPerPage", @item)'>@item</a></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <table class="table table-sm">
            <colgroup>
                <col class="col-11">
                <col class="col-1">
            </colgroup>
            <thead>
                <th>Project</th>
                <th>Actions</th>
            </thead>
            <tbody>
                @foreach (var project in Model.AssignedProjects.Collection)
                {
                    <tr>
                        <td>@project.Name</td>
                        <td>
                            <a asp-action="View" asp-controller="Projects" asp-route-id="@project.Id">
                                View
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn-group gap-1 border">
            <a class="btn btn-secondary" href='@getURLWithNewQueryString("Page", "1")'>
                First
            </a>
            @* page numbers in between *@
            @for (int i = Model.AssignedProjects.FirstPageNumberDisplayed;
           i <=
           Model.AssignedProjects.LastPageNumberDisplayed; i++)
            {
                string classes = "btn btn-secondary";
                string urlAction = getURLWithNewQueryString("Page", $"{i}");
                var routeData = ViewContext.RouteData.Values;
                if (Model.AssignedProjects.CurrentPage == i) classes += " active";
                <a class="@classes" href="@urlAction">
                    @i
                </a>
            }
            <a class="btn btn-secondary" href='@getURLWithNewQueryString("Page", Model.AssignedProjects.TotalPageCount)'>
                Last (@Model.AssignedProjects.TotalPageCount)
            </a>
        </div>
    }
    else
    {
        <p class=" alert alert-info">
            No assigned projects found.
        </p>
    }

</div>